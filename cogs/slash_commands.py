import discord
from discord import app_commands
from discord.ext import commands
from typing import Optional
import random
from games.blackjack import BlackjackGame
from games.bau_cua import BauCuaGame, BauCuaAnimal
from games.xoc_dia import XocDiaGame, XocDiaBetType

class BlackjackView(discord.ui.View):
    def __init__(self, game: BlackjackGame, db, bot, user_id: int, guild_id: int):
        super().__init__(timeout=180)  # 3 minutes timeout
        self.game = game
        self.db = db
        self.bot = bot
        self.user_id = user_id
        self.guild_id = guild_id
        
        # C·∫≠p nh·∫≠t buttons d·ª±a tr√™n tr·∫°ng th√°i game
        self.update_buttons()
    
    def update_buttons(self):
        """C·∫≠p nh·∫≠t buttons d·ª±a tr√™n tr·∫°ng th√°i game hi·ªán t·∫°i"""
        # X√≥a t·∫•t c·∫£ buttons c≈©
        self.clear_items()
        
        state = self.game.get_game_state()
        
        if not state['game_over']:
            # Th√™m button Hit
            self.add_item(HitButton())
            
            # Th√™m button Stand
            self.add_item(StandButton())
            
            # Th√™m button Double n·∫øu c√≥ th·ªÉ
            if state['can_double']:
                self.add_item(DoubleButton())
            
            # Th√™m button Split n·∫øu c√≥ th·ªÉ
            if state['can_split']:
                self.add_item(SplitButton())
    
    async def update_message(self, interaction: discord.Interaction):
        """C·∫≠p nh·∫≠t message v·ªõi tr·∫°ng th√°i game m·ªõi"""
        state = self.game.get_game_state()
        
        embed = discord.Embed(title="üé∞ Blackjack", color=discord.Color.blue())
        embed.add_field(
            name="B√†i c·ªßa b·∫°n",
            value=f"{' '.join(state['player_hand'])} (ƒêi·ªÉm: {state['player_value']})",
            inline=False
        )
        
        if state['game_over']:
            embed.add_field(
                name="B√†i c·ªßa Dealer", 
                value=f"{' '.join(state['dealer_hand'])} (ƒêi·ªÉm: {state['dealer_value']})",
                inline=False
            )
            
            result_text = {
                "BUST": "üí• B·∫°n ƒë√£ qu√° 21!",
                "DEALER_BUST": "üéâ Dealer qu√° 21! B·∫°n th·∫Øng!",
                "WIN": "üéâ B·∫°n th·∫Øng!",
                "LOSE": "üòû B·∫°n thua!",
                "PUSH": "ü§ù H√≤a!",
                "BLACKJACK": "üéØ Blackjack! Tuy·ªát v·ªùi!"
            }.get(state['result'], state['result'])
            
            embed.add_field(name="K·∫øt qu·∫£", value=result_text, inline=False)
            embed.add_field(name="üí∞ Th∆∞·ªüng", value=f"{state['payout']:,}", inline=True)
            
            # C·ªông ti·ªÅn th·∫Øng
            from config import config
            if self.user_id not in config.ADMIN_IDS and state['payout'] > 0:
                self.db.update_balance(self.user_id, self.guild_id, state['payout'])
                self.db.add_transaction(
                    self.user_id, self.guild_id, state['payout'], "game",
                    f"Blackjack win: {state['payout']}"
                )
            
            # X√≥a game kh·ªèi active
            game_key = f"{self.user_id}_{self.guild_id}"
            if game_key in self.bot.active_games:
                del self.bot.active_games[game_key]
            
            # Disable t·∫•t c·∫£ buttons khi game k·∫øt th√∫c
            for item in self.children:
                item.disabled = True
                
        else:
            embed.add_field(
                name="B√†i c·ªßa Dealer",
                value=f"{state['dealer_hand'][0]} ? ? (ƒêi·ªÉm: {state['dealer_value']}+)",
                inline=False
            )
            
            # C·∫≠p nh·∫≠t buttons cho tr·∫°ng th√°i m·ªõi
            self.update_buttons()
        
        embed.add_field(name="üí∞ C∆∞·ª£c", value=f"{state['bet']:,}", inline=True)
        
        try:
            if interaction.response.is_done():
                await interaction.edit_original_response(embed=embed, view=self)
            else:
                await interaction.response.edit_message(embed=embed, view=self)
        except Exception as e:
            print(f"Error updating message: {e}")

class HitButton(discord.ui.Button):
    def __init__(self):
        super().__init__(style=discord.ButtonStyle.primary, label="üîÑ Hit", custom_id="hit")
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        view: BlackjackView = self.view
        success = view.game.player_hit()
        
        if success:
            await view.update_message(interaction)
        else:
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ r√∫t b√†i!", ephemeral=True)

class StandButton(discord.ui.Button):
    def __init__(self):
        super().__init__(style=discord.ButtonStyle.secondary, label="‚úã Stand", custom_id="stand")
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        view: BlackjackView = self.view
        view.game.player_stand()
        
        await view.update_message(interaction)

class DoubleButton(discord.ui.Button):
    def __init__(self):
        super().__init__(style=discord.ButtonStyle.success, label="üí∞ Double", custom_id="double")
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        view: BlackjackView = self.view
        
        # Ki·ªÉm tra s·ªë d∆∞
        from config import config
        if view.user_id not in config.ADMIN_IDS:
            balance_obj = view.db.get_user_balance(view.user_id, view.guild_id)
            if balance_obj.balance < view.game.bet:
                await interaction.followup.send("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ double!", ephemeral=True)
                return
            
            # Tr·ª´ th√™m ti·ªÅn c∆∞·ª£c
            view.db.update_balance(view.user_id, view.guild_id, -view.game.bet)
        
        success = view.game.player_double()
        
        if success:
            await view.update_message(interaction)
        else:
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ double!", ephemeral=True)

class SplitButton(discord.ui.Button):
    def __init__(self):
        super().__init__(style=discord.ButtonStyle.danger, label="‚ûó Split", custom_id="split")
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()
        await interaction.followup.send("‚ùå T√≠nh nƒÉng Split ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£!", ephemeral=True)

class SlashCommandsCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = bot.db

    def get_user_balance(self, user_id: int, guild_id: int) -> int:
        """L·∫•y s·ªë d∆∞ c·ªßa user"""
        try:
            balance_obj = self.bot.db.get_or_create_user_balance(user_id, guild_id)
            return balance_obj.balance
        except Exception as e:
            print(f"Error getting balance for {user_id}: {e}")
            return 0

    def is_admin(self, user_id: int) -> bool:
        """Ki·ªÉm tra c√≥ ph·∫£i admin kh√¥ng"""
        from config import config
        return user_id in config.ADMIN_IDS

    # SLASH COMMANDS - KINH T·∫æ
    @app_commands.command(name="balance", description="Ki·ªÉm tra s·ªë d∆∞ c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c")
    @app_commands.describe(member="Ng∆∞·ªùi mu·ªën ki·ªÉm tra s·ªë d∆∞ (ƒë·ªÉ tr·ªëng ƒë·ªÉ xem c·ªßa b·∫°n)")
    async def slash_balance(self, interaction: discord.Interaction, member: Optional[discord.Member] = None):
        """Ki·ªÉm tra s·ªë d∆∞ qua slash command"""
        try:
            target = member or interaction.user
            print(f"Checking balance for user: {target.id}, guild: {interaction.guild.id}")
            
            # ƒê·∫£m b·∫£o user c√≥ balance record
            balance_obj = self.db.get_or_create_user_balance(target.id, interaction.guild.id)
            balance = balance_obj.balance
            
            if self.is_admin(target.id):
                balance_text = "‚ôæÔ∏è V√¥ h·∫°n (Admin)"
            else:
                balance_text = f"üí∞ {balance:,}"
            
            embed = discord.Embed(
                title=f"S·ªë d∆∞ c·ªßa {target.display_name}",
                description=balance_text,
                color=discord.Color.gold()
            )
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            print(f"Balance error: {e}")
            await interaction.response.send_message("‚ùå ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra s·ªë d∆∞!", ephemeral=True)

    # SLASH COMMANDS - BLACKJACK (V·ªöI BUTTONS)
    @app_commands.command(name="blackjack", description="Ch∆°i Blackjack")
    @app_commands.describe(bet="S·ªë ti·ªÅn c∆∞·ª£c")
    async def slash_blackjack(self, interaction: discord.Interaction, bet: int):
        """Ch∆°i Blackjack qua slash command v·ªõi buttons"""
        try:
            if bet <= 0:
                await interaction.response.send_message("‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
                return

            user_id = interaction.user.id
            guild_id = interaction.guild.id
            
            # ƒê·∫£m b·∫£o user c√≥ balance record
            balance_obj = self.db.get_or_create_user_balance(user_id, guild_id)
            
            # Ki·ªÉm tra s·ªë d∆∞
            if not self.is_admin(user_id):
                if balance_obj.balance < bet:
                    await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!", ephemeral=True)
                    return

            # T·∫°o game Blackjack m·ªõi
            luck_factor = 1.0
            game = BlackjackGame(bet, user_id, luck_factor)
            
            # L∆∞u game active
            game_key = f"{user_id}_{guild_id}"
            self.bot.active_games[game_key] = game
            
            # Tr·ª´ ti·ªÅn c∆∞·ª£c
            if not self.is_admin(user_id):
                self.db.update_balance(user_id, guild_id, -bet)
                self.db.add_transaction(
                    user_id, guild_id, -bet, "game", 
                    f"Blackjack bet: {bet}"
                )
            
            # Hi·ªÉn th·ªã game state v·ªõi buttons
            state = game.get_game_state()
            
            embed = discord.Embed(title="üé∞ Blackjack", color=discord.Color.blue())
            embed.add_field(
                name="B√†i c·ªßa b·∫°n",
                value=f"{' '.join(state['player_hand'])} (ƒêi·ªÉm: {state['player_value']})",
                inline=False
            )
            embed.add_field(
                name="B√†i c·ªßa Dealer",
                value=f"{state['dealer_hand'][0]} ? ? (ƒêi·ªÉm: {state['dealer_value']}+)",
                inline=False
            )
            embed.add_field(name="üí∞ C∆∞·ª£c", value=f"{state['bet']:,}", inline=True)
            
            # T·∫°o view v·ªõi buttons
            view = BlackjackView(game, self.db, self.bot, user_id, guild_id)
            
            await interaction.response.send_message(embed=embed, view=view)
            
        except Exception as e:
            print(f"Blackjack error: {e}")
            await interaction.response.send_message("‚ùå ƒê√£ x·∫£y ra l·ªói khi b·∫Øt ƒë·∫ßu game Blackjack!", ephemeral=True)

    # SLASH COMMANDS - B·∫¶U CUA
    @app_commands.command(name="baucua", description="Ch∆°i B·∫ßu Cua")
    @app_commands.describe(
        bet="T·ªïng s·ªë ti·ªÅn c∆∞·ª£c",
        animal1="C·ª≠a c∆∞·ª£c th·ª© nh·∫•t",
        animal2="C·ª≠a c∆∞·ª£c th·ª© hai", 
        animal3="C·ª≠a c∆∞·ª£c th·ª© ba"
    )
    @app_commands.choices(
        animal1=[
            app_commands.Choice(name="B·∫ßu üéâ", value="bau"),
            app_commands.Choice(name="Cua ü¶Ä", value="cua"),
            app_commands.Choice(name="T√¥m ü¶ê", value="tom"),
            app_commands.Choice(name="C√° üêü", value="ca"),
            app_commands.Choice(name="G√† üêì", value="ga"),
            app_commands.Choice(name="Nai ü¶å", value="nai")
        ],
        animal2=[
            app_commands.Choice(name="B·∫ßu üéâ", value="bau"),
            app_commands.Choice(name="Cua ü¶Ä", value="cua"), 
            app_commands.Choice(name="T√¥m ü¶ê", value="tom"),
            app_commands.Choice(name="C√° üêü", value="ca"),
            app_commands.Choice(name="G√† üêì", value="ga"),
            app_commands.Choice(name="Nai ü¶å", value="nai")
        ],
        animal3=[
            app_commands.Choice(name="B·∫ßu üéâ", value="bau"),
            app_commands.Choice(name="Cua ü¶Ä", value="cua"),
            app_commands.Choice(name="T√¥m ü¶ê", value="tom"),
            app_commands.Choice(name="C√° üêü", value="ca"),
            app_commands.Choice(name="G√† üêì", value="ga"),
            app_commands.Choice(name="Nai ü¶å", value="nai")
        ]
    )
    async def slash_baucua(self, interaction: discord.Interaction, bet: int, 
                          animal1: str, animal2: Optional[str] = None, animal3: Optional[str] = None):
        """Ch∆°i B·∫ßu Cua qua slash command"""
        try:
            animals = [animal1]
            if animal2:
                animals.append(animal2)
            if animal3:
                animals.append(animal3)

            user_id = interaction.user.id
            guild_id = interaction.guild.id

            # Parse c∆∞·ª£c
            animal_bets = {}
            animal_map = {
                "bau": BauCuaAnimal.BAU,
                "cua": BauCuaAnimal.CUA,
                "tom": BauCuaAnimal.TOM,
                "ca": BauCuaAnimal.CA, 
                "ga": BauCuaAnimal.GA,
                "nai": BauCuaAnimal.NAI
            }
            
            bet_per_animal = bet // len(animals)
            if bet_per_animal <= 0:
                await interaction.response.send_message("‚ùå S·ªë ti·ªÅn c∆∞·ª£c m·ªói c·ª≠a ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
                return
            
            for animal_str in animals:
                animal = animal_map.get(animal_str)
                if not animal:
                    await interaction.response.send_message(f"‚ùå C·ª≠a c∆∞·ª£c '{animal_str}' kh√¥ng h·ª£p l·ªá!", ephemeral=True)
                    return
                animal_bets[animal] = bet_per_animal

            total_bet = bet_per_animal * len(animals)
            
            # ƒê·∫£m b·∫£o user c√≥ balance record
            balance_obj = self.db.get_or_create_user_balance(user_id, guild_id)
            
            # Ki·ªÉm tra s·ªë d∆∞
            if not self.is_admin(user_id):
                if balance_obj.balance < total_bet:
                    await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!", ephemeral=True)
                    return

            # T·∫°o game
            luck_factor = 1.0
            game = BauCuaGame(animal_bets, user_id, luck_factor)
            
            # Tr·ª´ ti·ªÅn c∆∞·ª£c
            if not self.is_admin(user_id):
                self.db.update_balance(user_id, guild_id, -total_bet)
                self.db.add_transaction(
                    user_id, guild_id, -total_bet, "game",
                    f"Bau Cua bet: {total_bet}"
                )
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            state = game.get_game_state()
            
            embed = discord.Embed(title="üé≤ B·∫ßu Cua", color=discord.Color.green())
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ x√∫c x·∫Øc
            dice_display = " ".join([emoji for _, emoji in state['dice_results']])
            embed.add_field(name="üéØ K·∫øt qu·∫£", value=dice_display, inline=False)
            
            # Hi·ªÉn th·ªã c∆∞·ª£c
            bets_text = "\n".join([f"{animal}: {amount:,}" for animal, amount in state['bets'].items()])
            embed.add_field(name="üí∞ C∆∞·ª£c c·ªßa b·∫°n", value=bets_text, inline=True)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
            result_text = f"T·ªïng c∆∞·ª£c: {state['total_bet']:,}\n"
            result_text += f"Th∆∞·ªüng: {state['payout']:,}\n"
            profit = state['payout'] - state['total_bet']
            result_text += f"L·ª£i nhu·∫≠n: {profit:,}"
            
            embed.add_field(name="üìä K·∫øt qu·∫£", value=result_text, inline=True)
            
            # C·ªông ti·ªÅn th·∫Øng
            if not self.is_admin(user_id) and state['payout'] > 0:
                self.db.update_balance(user_id, guild_id, state['payout'])
                self.db.add_transaction(
                    user_id, guild_id, state['payout'], "game",
                    f"Bau Cua win: {state['payout']}"
                )
            
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            print(f"Bau cua error: {e}")
            await interaction.response.send_message("‚ùå ƒê√£ x·∫£y ra l·ªói khi ch∆°i B·∫ßu Cua!", ephemeral=True)

    # SLASH COMMANDS - X√ìC ƒêƒ®A
    @app_commands.command(name="xocdia", description="Ch∆°i X√≥c ƒêƒ©a")
    @app_commands.describe(
        bet="S·ªë ti·ªÅn c∆∞·ª£c", 
        bet_type="Lo·∫°i c∆∞·ª£c"
    )
    @app_commands.choices(
        bet_type=[
            app_commands.Choice(name="Ch·∫µn (1:1)", value="chan"),
            app_commands.Choice(name="L·∫ª (1:1)", value="le"),
            app_commands.Choice(name="2 ƒê·ªè 2 Tr·∫Øng (1:2)", value="2do"),
            app_commands.Choice(name="3 ƒê·ªè 1 Tr·∫Øng (1:4)", value="3do"),
            app_commands.Choice(name="3 Tr·∫Øng 1 ƒê·ªè (1:4)", value="3trang"), 
            app_commands.Choice(name="4 ƒê·ªè (1:8)", value="4do"),
            app_commands.Choice(name="4 Tr·∫Øng (1:8)", value="4trang")
        ]
    )
    async def slash_xocdia(self, interaction: discord.Interaction, bet: int, bet_type: str):
        """Ch∆°i X√≥c ƒêƒ©a qua slash command"""
        try:
            user_id = interaction.user.id
            guild_id = interaction.guild.id
            
            # Parse lo·∫°i c∆∞·ª£c
            bet_type_map = {
                "chan": XocDiaBetType.EVEN,
                "le": XocDiaBetType.ODD,
                "2do": XocDiaBetType.TWO_RED,
                "3do": XocDiaBetType.THREE_RED,
                "3trang": XocDiaBetType.THREE_WHITE,
                "4do": XocDiaBetType.FOUR_RED,
                "4trang": XocDiaBetType.FOUR_WHITE
            }
            
            xd_bet_type = bet_type_map.get(bet_type)
            if not xd_bet_type:
                await interaction.response.send_message("‚ùå Lo·∫°i c∆∞·ª£c kh√¥ng h·ª£p l·ªá!", ephemeral=True)
                return
            
            # ƒê·∫£m b·∫£o user c√≥ balance record
            balance_obj = self.db.get_or_create_user_balance(user_id, guild_id)
            
            # Ki·ªÉm tra s·ªë d∆∞
            if not self.is_admin(user_id):
                if balance_obj.balance < bet:
                    await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!", ephemeral=True)
                    return
            
            # T·∫°o game
            bets = {xd_bet_type: bet}
            luck_factor = 1.0
            game = XocDiaGame(bets, user_id, luck_factor)
            
            # Tr·ª´ ti·ªÅn c∆∞·ª£c
            if not self.is_admin(user_id):
                self.db.update_balance(user_id, guild_id, -bet)
                self.db.add_transaction(
                    user_id, guild_id, -bet, "game",
                    f"Xoc Dia bet: {bet} ({bet_type})"
                )
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            state = game.get_game_state()
            
            embed = discord.Embed(title="üé™ X√≥c ƒêƒ©a", color=discord.Color.orange())
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·ªìng xu
            coins_display = " ".join(state['coin_results'])
            embed.add_field(name="üéØ K·∫øt qu·∫£", value=coins_display, inline=False)
            embed.add_field(name="üî¥ S·ªë m·∫∑t ƒë·ªè", value=state['red_count'], inline=True)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            result_text = f"C∆∞·ª£c: {state['total_bet']:,}\n"
            result_text += f"Th∆∞·ªüng: {state['payout']:,}\n"
            profit = state['payout'] - state['total_bet']
            result_text += f"L·ª£i nhu·∫≠n: {profit:,}"
            
            embed.add_field(name="üìä K·∫øt qu·∫£", value=result_text, inline=True)
            
            # C·ªông ti·ªÅn th·∫Øng
            if not self.is_admin(user_id) and state['payout'] > 0:
                self.db.update_balance(user_id, guild_id, state['payout'])
                self.db.add_transaction(
                    user_id, guild_id, state['payout'], "game",
                    f"Xoc Dia win: {state['payout']}"
                )
            
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            print(f"Xoc dia error: {e}")
            await interaction.response.send_message("‚ùå ƒê√£ x·∫£y ra l·ªói khi ch∆°i X√≥c ƒêƒ©a!", ephemeral=True)

    # SLASH COMMANDS - CHUY·ªÇN TI·ªÄN
    @app_commands.command(name="transfer", description="Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi ch∆°i kh√°c")
    @app_commands.describe(
        member="Ng∆∞·ªùi nh·∫≠n ti·ªÅn",
        amount="S·ªë ti·ªÅn chuy·ªÉn"
    )
    async def slash_transfer(self, interaction: discord.Interaction, member: discord.Member, amount: int):
        """Chuy·ªÉn ti·ªÅn qua slash command"""
        try:
            if amount <= 0:
                await interaction.response.send_message("‚ùå S·ªë ti·ªÅn chuy·ªÉn ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
                return
            
            if member == interaction.user:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!", ephemeral=True)
                return
            
            # ƒê·∫£m b·∫£o c·∫£ 2 user ƒë·ªÅu c√≥ balance record
            sender_balance_obj = self.db.get_or_create_user_balance(interaction.user.id, interaction.guild.id)
            receiver_balance_obj = self.db.get_or_create_user_balance(member.id, interaction.guild.id)
            
            # Ki·ªÉm tra s·ªë d∆∞
            if sender_balance_obj.balance < amount:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ chuy·ªÉn!", ephemeral=True)
                return
            
            # Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
            self.db.update_balance(interaction.user.id, interaction.guild.id, -amount)
            self.db.update_balance(member.id, interaction.guild.id, amount)
            
            # Ghi log transaction
            self.db.add_transaction(
                interaction.user.id, interaction.guild.id, -amount, "transfer",
                f"Chuy·ªÉn ti·ªÅn cho {member.display_name}"
            )
            self.db.add_transaction(
                member.id, interaction.guild.id, amount, "transfer",
                f"Nh·∫≠n ti·ªÅn t·ª´ {interaction.user.display_name}"
            )
            
            embed = discord.Embed(
                title="‚úÖ Chuy·ªÉn ti·ªÅn th√†nh c√¥ng",
                description=f"ƒê√£ chuy·ªÉn {amount:,} cho {member.mention}",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            print(f"Transfer error: {e}")
            await interaction.response.send_message("‚ùå ƒê√£ x·∫£y ra l·ªói khi chuy·ªÉn ti·ªÅn!", ephemeral=True)

    # SLASH COMMANDS - ADMIN
    @app_commands.command(name="addmoney", description="Th√™m ti·ªÅn cho ng∆∞·ªùi ch∆°i (Admin only)")
    @app_commands.describe(
        member="Ng∆∞·ªùi nh·∫≠n ti·ªÅn",
        amount="S·ªë ti·ªÅn th√™m"
    )
    async def slash_addmoney(self, interaction: discord.Interaction, member: discord.Member, amount: int):
        """Th√™m ti·ªÅn qua slash command"""
        try:
            if not self.is_admin(interaction.user.id):
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng command n√†y!", ephemeral=True)
                return

            if amount <= 0:
                await interaction.response.send_message("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
                return
            
            # ƒê·∫£m b·∫£o user c√≥ balance record
            self.db.get_or_create_user_balance(member.id, interaction.guild.id)
            
            self.db.update_balance(member.id, interaction.guild.id, amount)
            self.db.add_transaction(
                member.id, interaction.guild.id, amount, "admin",
                f"Admin {interaction.user.display_name} add money"
            )
            
            embed = discord.Embed(
                title="‚úÖ Th√™m ti·ªÅn th√†nh c√¥ng",
                description=f"ƒê√£ th√™m {amount:,} cho {member.mention}",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            print(f"Add money error: {e}")
            await interaction.response.send_message("‚ùå ƒê√£ x·∫£y ra l·ªói khi th√™m ti·ªÅn!", ephemeral=True)

    @app_commands.command(name="removemoney", description="X√≥a ti·ªÅn c·ªßa ng∆∞·ªùi ch∆°i (Admin only)")
    @app_commands.describe(
        member="Ng∆∞·ªùi b·ªã x√≥a ti·ªÅn",
        amount="S·ªë ti·ªÅn x√≥a"
    )
    async def slash_removemoney(self, interaction: discord.Interaction, member: discord.Member, amount: int):
        """X√≥a ti·ªÅn qua slash command"""
        try:
            if not self.is_admin(interaction.user.id):
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng command n√†y!", ephemeral=True)
                return
        
            if amount <= 0:
                await interaction.response.send_message("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
                return
            
            # ƒê·∫£m b·∫£o user c√≥ balance record
            balance_obj = self.db.get_or_create_user_balance(member.id, interaction.guild.id)
            current_balance = balance_obj.balance
            remove_amount = min(amount, current_balance)
            
            self.db.update_balance(member.id, interaction.guild.id, -remove_amount)
            self.db.add_transaction(
                member.id, interaction.guild.id, -remove_amount, "admin",
                f"Admin {interaction.user.display_name} remove money"
            )
            
            embed = discord.Embed(
                title="‚úÖ X√≥a ti·ªÅn th√†nh c√¥ng",
                description=f"ƒê√£ x√≥a {remove_amount:,} t·ª´ {member.mention}",
                color=discord.Color.orange()
            )
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            print(f"Remove money error: {e}")
            await interaction.response.send_message("‚ùå ƒê√£ x·∫£y ra l·ªói khi x√≥a ti·ªÅn!", ephemeral=True)

async def setup(bot):
    await bot.add_cog(SlashCommandsCog(bot))